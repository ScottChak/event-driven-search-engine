@page "/search"

@using Article.Portal.Domain
@using Article.Portal.Business.Services.SearchArticleSummaries
@using Microsoft.AspNetCore.Components

@inject IUriHelper UriHelper
@inject ISearchArticleSummariesService searchArticleSummariesService

<h1>Search Articles</h1>

@if (searchingArticleSummaries)
{
    <p><em>Searching ...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p><em>Failed to search articles (@errorMessage) ...</em></p>
}
else if (articleSummaries == null || articleSummaries.Count() == 0)
{
    <p><em>No articles found</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Author</th>
                <th>Title</th>
                <th>Publication Date (UTC)</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var articleSummary in articleSummaries)
            {
                <tr>
                    <td>@articleSummary.Author</td>
                    <td>@articleSummary.Title</td>
                    <td>@articleSummary.PublicationUtcDate</td>
                    <td>@articleSummary.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    private string searchTerm = default(string);

    private bool searchingArticleSummaries = false;
    private string errorMessage = default(string);

    IEnumerable<ArticleSummary> articleSummaries;

    private async Task SearchArticleSummariesAsync()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());
        searchTerm = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("term", out var type) ? type.First() : default(string);

        searchingArticleSummaries = true;

        try
        {
            articleSummaries = await searchArticleSummariesService.SearchArticleSummariesAsync(searchTerm);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            searchingArticleSummaries = false;
        }
    }

    private async Task OnLocationChangedAsync(object sender, string location)
    {
        await SearchArticleSummariesAsync();
    }

    protected override async Task OnInitAsync()
    {
        UriHelper.OnLocationChanged += async (s, l) => await OnLocationChangedAsync(s, l);
        await SearchArticleSummariesAsync();
    }
}
