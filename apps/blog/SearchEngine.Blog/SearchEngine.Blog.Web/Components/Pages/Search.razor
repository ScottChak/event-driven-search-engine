@page "/search"

@using SearchEngine.Blog.Domain
@using SearchEngine.Blog.Interfaces

@inject ISearchArticleSummariesService searchArticleSummariesService

<h1>Search Articles</h1>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (articleSummaries == null || articleSummaries.Count() == 0)
{
    <p><em>No articles found</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Author</th>
                <th>Title</th>
                <th>Publication Date (UTC)</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var articleSummary in articleSummaries)
            {
                <tr>
                    <td>@articleSummary.Author</td>
                    <td>@articleSummary.Title</td>
                    <td>@articleSummary.PublicationUtcDate</td>
                    <td>@articleSummary.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    bool loading = false;
    IEnumerable<ArticleSummary> articleSummaries;

    protected override async Task OnInitAsync()
    {
        await SearchArticleSummaries();
    }

    private async Task SearchArticleSummaries()
    {
        loading = true;

        await Task.WhenAll(
            Task.Factory.StartNew(async () =>
            {
                articleSummaries = await searchArticleSummariesService.SearchArticleSummariesAsync(string.Empty);
            }),
            Task.Delay(5000));

        loading = false;
    }
}
